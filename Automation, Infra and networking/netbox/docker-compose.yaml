services:
  traefik:
    image: traefik:v3.1.7
    container_name: traefik
    restart: unless-stopped
    ports:
      - 443:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./traefik.yml:/traefik.yml:ro
      - ./log:/var/log/traefik:ro
      - ./certs:/certs:ro
    networks:
      - netbox-proxy
    environment:
      LOG_LEVEL: debug
  netbox: &netbox
    restart: unless-stopped
    image: netboxcommunity/netbox:v4.2.8
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - redis
      - redis-cache
    env_file: env/netbox.env
    user: "unit:root"
    healthcheck:
      test: curl -f http://localhost:8080/login/ || exit 1
      start_period: 90s
      timeout: 3s
      interval: 15s
    volumes:
      - ./configuration:/etc/netbox/config:z,ro
      - ./netbox-media-files:/opt/netbox/netbox/media:rw
      - ./netbox-reports-files:/opt/netbox/netbox/reports:rw
      - ./netbox-scripts-files:/opt/netbox/netbox/scripts:rw
      - ./configuration.py:/opt/netbox/netbox/config/configuration.py
    networks:
      - netbox
      - netbox-proxy

  netbox-worker:
    <<: *netbox
    restart: unless-stopped
    depends_on:
      netbox:
        condition: service_healthy
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker
    healthcheck:
      test: ps -aux | grep -v grep | grep -q rqworker || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s
    networks:
      - netbox

  netbox-housekeeping:
    <<: *netbox
    restart: unless-stopped
    depends_on:
      netbox:
        condition: service_healthy
    command:
      - /opt/netbox/housekeeping.sh
    healthcheck:
      test: ps -aux | grep -v grep | grep -q housekeeping || exit 1
      start_period: 20s
      timeout: 3s
      interval: 15s
    networks:
      - netbox

  # postgres
  postgres:
    restart: unless-stopped
    image: docker.io/postgres:16-alpine
    healthcheck:
      test: pg_isready -q -t 2 -d $$POSTGRES_DB -U $$POSTGRES_USER
      start_period: 20s
      timeout: 30s
      interval: 10s
      retries: 5
    env_file: env/postgres.env
    volumes:
      - ./netbox-postgres-data:/var/lib/postgresql/data
    networks:
      - netbox

  # redis
  redis:
    restart: unless-stopped
    image: docker.io/valkey/valkey:8.0-alpine
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    healthcheck: &redis-healthcheck
      test: '[ $$(valkey-cli --pass "$${REDIS_PASSWORD}" ping) = ''PONG'' ]'
      start_period: 5s
      timeout: 3s
      interval: 1s
      retries: 5
    env_file: env/redis.env
    volumes:
      - ./netbox-redis-data:/data
    networks:
      - netbox

  redis-cache:
    restart: unless-stopped
    image: docker.io/valkey/valkey:8.0-alpine
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - valkey-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    healthcheck: *redis-healthcheck
    env_file: env/redis-cache.env
    volumes:
      - ./netbox-redis-cache-data:/data
    networks:
      - netbox

networks:
  netbox:
  netbox-proxy: